name: Main

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_TAR_FILENAME: /tmp/${{ github.event.repository.name }}.${{ github.sha }}.tar
  DOCKER_API_VERSION: ${{ vars.DOCKER_API_VERSION }}

jobs:
  setup:
    runs-on: ubuntu-latest
    needs: []
    outputs:
      image_name:  ${{ steps.vars.outputs.image_name }}
      branch_name: ${{ steps.vars.outputs.branch_name }}
    steps:
      - name: Prepare outputs for workflow jobs
        id: vars
        run: |
          TAG="${GITHUB_SHA:0:7}"
          echo "image_name=${REGISTRY}/cyber-dojo/sinatra-base:${TAG}" >> ${GITHUB_OUTPUT}
          echo "branch_name=update-base-image-${TAG}"                  >> ${GITHUB_OUTPUT}


  build-image:
    runs-on: ubuntu-latest
    needs: [setup]
    outputs:
      digest: ${{ steps.sanitize-digest.outputs.digest }}
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
    permissions:
      id-token: write
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ghcr.io
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          no-cache: true
          push: true
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            COMMIT_SHA: ${{ github.sha }}

      - name: Sanitize digest
        id: sanitize-digest
        run: |
          DIGEST=$(echo "${{ steps.docker_build.outputs.digest }}" | sed 's/^sha256://')
          echo "digest=${DIGEST}" >> ${GITHUB_OUTPUT}

      - name: Tar Docker image
        run: |
          docker pull "${IMAGE_NAME}"
          docker image save "${IMAGE_NAME}" --output "${IMAGE_TAR_FILENAME}"

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: ${{ env.IMAGE_TAR_FILENAME }}
          key:  ${{ env.IMAGE_NAME }}


  snyk-container-scan:
    runs-on: ubuntu-latest
    needs: [setup, build-image]
    env:
      SARIF_FILENAME: snyk.container.scan.json
      IMAGE_NAME:     ${{ needs.setup.outputs.image_name }}
    steps:
      - name: Retrieve Docker image from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.IMAGE_TAR_FILENAME }}
          key:  ${{ env.IMAGE_NAME }}

      - name: Load Docker image
        run:
          docker image load --input "${IMAGE_TAR_FILENAME}"

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Snyk container scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          make snyk-container-scan


  create-pr-on-downstream-repos:
    needs: [setup, build-image, snyk-container-scan]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
      BRANCH_NAME: ${{ needs.setup.outputs.branch_name }}
    strategy:
      matrix:
        repo: [ differ, saver, dashboard, start-points-base ]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: cyber-dojo/${{ matrix.repo }}
          token: ${{ secrets.BASE_IMAGE_UPGRADE }}
          fetch-depth: 0

      - name: Create branch
        run:
          git checkout -b ${BRANCH_NAME}

      - name: Edit 1st line of Dockerfile
        env:
          BASE_IMAGE: ${{ env.IMAGE_NAME }}@sha256:${{ needs.build-image.outputs.digest }}
        run: |
          cp Dockerfile Dockerfile.original
          echo "FROM ${BASE_IMAGE}" > Dockerfile
          cat Dockerfile.original | tail -n+2 >> Dockerfile
          rm Dockerfile.original

      - name: Commit
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.event.sender.login }}@users.noreply.github.com"
          git add .
          git commit --message "Dockerfile - Automated base-image update"
          git push --set-upstream origin ${BRANCH_NAME}

      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.BASE_IMAGE_UPGRADE }}
        run:
          gh pr create
            --base main
            --head ${BRANCH_NAME}
            --title 'Merge update-base-image into main'
            --body 'Created by Github action'
